Metadata-Version: 2.1
Name: MBTiles-Segmentation
Version: 0.1
Summary: A package for working with MBTiles and generating image-label pairs for semantic segmentation models.
Home-page: https://github.com/masaishi/MBTiles_Segmentation
Author: Masamune Ishihara
Author-email: mwishiha@ucsc.edu
License: MIT License
Requires-Python: >=3.6
Description-Content-Type: text/markdown

# MBTiles_Segmentation

MBTiles_Segmentation can make YOLO segmentation datasets from MBTiles files. This project provides tools to generate image and label data for training and evaluating segmentation models.

## Table of Contents

- [Introduction](#introduction)
- [Getting Started](#getting-started)
- [MBTiles Handler](#mbtiles-handler)
- [Segmentation Dataset Creator](#segmentation-dataset-creator)
- [Usage](#usage)
- [License](#license)

## Introduction

MBTiles_Segmentation provides features the extraction of vector data from MBTiles files and the creation of image-label pairs, primarily designed for training and evaluating YOLO (You Only Look Once) models.

You can download map data in the MBTiles format from various sources, including MapTiler's dataset collection (https://data.maptiler.com/downloads/planet/).

The project consists of two main components: src/mbtiles_handler.py, which enables the handling of MBTiles files, and src/seg_dataset_creator.py, which generates image and label data suitable for YOLO-based object detection tasks.

# Getting Started

The notebook that actually ran is [example/getting_started.ipynb](example/getting_started.ipynb)

Follow these steps to get started with the MBTiles_Segmentation project:

1. **Download the MBTiles File:**
   - Visit the MapTiler website at [https://data.maptiler.com/downloads/asia/japan/tokyo/](https://data.maptiler.com/downloads/asia/japan/tokyo/).
   - Download the `japan_tokyo.mbtiles` file, which contains map data for Tokyo, Japan.

2. **Move MBTiles File:**
   - After downloading, move the `japan_tokyo.mbtiles` file into the `sample` folder of the project.

3. **Explore MBTiles Handler:**
   - You can use the `mbtiles_handler.py` script to explore the contents of the MBTiles file. Below are some example commands:

     - To get information about zoom level min and max:
       ```
       python mbtiles_handler.py --mbtiles_path sample/japan_tokyo.mbtiles --zoom_minmax
       ```

     - To get column min and max for a specific zoom level (e.g., zoom level 12):
       ```
       python mbtiles_handler.py --mbtiles_path sample/japan_tokyo.mbtiles --column_minmax 12
       ```

     - To get row min and max for a specific zoom level (e.g., zoom level 12):
       ```
       python mbtiles_handler.py --mbtiles_path sample/japan_tokyo.mbtiles --row_minmax 12
       ```

     - To get data for a specific tile (e.g., zoom level 12, column 123, row 456):
       ```
       python mbtiles_handler.py --mbtiles_path sample/japan_tokyo.mbtiles --get_tile 10 907 619
       ```

     - To get random tile data for a specific zoom level (e.g., zoom level 14):
       ```
       python mbtiles_handler.py --mbtiles_path sample/japan_tokyo.mbtiles --get_random_tile 14
       ```

     - To get area tiles based on a standard tile and zoom level (e.g., standard zoom level 10, column 907, row 619, and target zoom level 11):
       ```
       python mbtiles_handler.py --mbtiles_path sample/japan_tokyo.mbtiles --get_area_tiles 10 907 619 11
       ```

4. **Generate Dataset:**
   - You can use the `seg_dataset_creator.py` script to generate image-label pairs for training and testing semantic segmentation models. Below is an example command:

     - To create a dataset in the `sample/japan_tokyo_dataset` folder, containing images and labels for training and validation, you can run the following command:
       ```
       python seg_dataset_creator.py --folder_path sample/japan_tokyo_dataset --mbtiles_path sample/japan_tokyo.mbtiles
       ```

     - You can also specify the number of images to create for each zoom level and the validation data ratio using the `--each_image_num` and `--val_ratio` options, respectively.

Now you are ready to explore and use the MBTiles_Segmentation project to work with MBTiles map data and create segmentation datasets for your machine learning projects.

## Usage

The notebook that actually ran is [example/usage.ipynb](example/usage.ipynb)

### [`src/mbtiles_handler.py`](src/mbtiles_handler.py)

#### Initialization
You can use `mbtiles_handler.py` to handle MBTiles files. To initialize an `MbtileHandler` object, provide the path to your MBTiles file and optional configuration parameters as follows:

```python
from src.mbtiles_handler import MbtileHandler

mbtile_path = "sample/japan_tokyo.mbtiles"
handler = MbtileHandler(mbtile_path, drop_lines=False, drop_points=True, drop_polygons=True, min_num_objs=5)
```

- `drop_lines`: Set to `True` to exclude LineString and MultiLineString features (default: `False`).
- `drop_points`: Set to `True` to exclude Point and MultiPoint features (default: `True`).
- `drop_polygons`: Set to `True` to exclude Polygon and MultiPolygon features (default: `True`).
- `min_num_objs`: Minimum number of objects required for a valid tile (default: `5`).

#### Fetch Zoom Level Range
To get the range of available zoom levels in the MBTiles file, use the `get_zoom_minmax` function:

```python
zoom_min, zoom_max = handler.get_zoom_minmax()
print(f"Available zoom levels: {zoom_min} to {zoom_max}")
```

#### Fetch Column Range for a Zoom Level
To get the range of tile columns for a specific zoom level, use the `get_column_minmax` function:

```python
zoom_level = 12  # Replace with your desired zoom level
col_min, col_max = handler.get_column_minmax(zoom_level)
print(f"Available columns for zoom level {zoom_level}: {col_min} to {col_max}")
```

#### Fetch Row Range for a Zoom Level
To get the range of tile rows for a specific zoom level, use the `get_row_minmax` function:

```python
zoom_level = 12  # Replace with your desired zoom level
row_min, row_max = handler.get_row_minmax(zoom_level)
print(f"Available rows for zoom level {zoom_level}: {row_min} to {row_max}")
```

#### Fetch Tile Data
To fetch and decode the data of a specific tile, use the `get_tile` function by providing the zoom level, column, and row of the tile:

```python
zoom_level = 12  # Replace with your desired zoom level
tile_col = 123   # Replace with your desired column
tile_row = 456   # Replace with your desired row

tile_data = handler.get_tile(zoom_level, tile_col, tile_row)
if tile_data is not None:
    # Process the tile data, which will be returned as a DataFrame
    print(tile_data)
else:
    print("Tile not found or does not meet the minimum object requirement.")
```

#### Fetch a Random Tile
To fetch and decode a random tile from the MBTiles file, you can use the `get_random_tile` function for a specific zoom level:

```python
zoom_level = 12  # Replace with your desired zoom level

random_tile = handler.get_random_tile(zoom_level)
if random_tile is not None:
    # Process the random tile data, which will be returned as a DataFrame
    print(random_tile)
else:
    print("No valid random tile found.")
```

#### Fetch Area Tiles
To fetch and decode multiple tiles within a specified area, use the `get_area_tiles` function. You need to provide the standard zoom level, column, and row, as well as the target zoom level:

```python
zoom_std = 12   # Replace with your standard zoom level
col_std = 123   # Replace with your standard column
row_std = 456   # Replace with your standard row
zoom_target = 14  # Replace with your desired target zoom level

area_tiles = handler.get_area_tiles(zoom_std, col_std, row_std, zoom_target)
if area_tiles is not None:
    # Process the area tiles data, which will be returned as a list of DataFrames
    for tile_data in area_tiles:
        print(tile_data)
else:
    print("No valid area tiles found.")
```

### `seg_dataset_creator.py`

#### Initialization
`seg_dataset_creator.py` allows you to create image-label pairs for YOLO-based object detection from MBTiles data. To initialize a `SegDatasetCreator` object, provide the output folder path, path to the MBTiles file, and optional configuration parameters:

```python
from seg_dataset_creator import SegDatasetCreator

output_folder = "output/dataset_folder"
mbtile_path = "path/to/your/mbtile.mbtiles"

# Initialize with optional color mapping and minimum object count
creator = SegDatasetCreator(output_folder, mbtile_path, color_mapping=None, min_num_objs=10)
```

- `color_mapping`: A dictionary that maps class names to colors (default: a predefined color mapping).
- `min_num_objs`: Minimum number of objects required for a valid tile (default: `10`).

#### Create Directories and YAML File
Before generating the dataset, you can create the necessary directory structure and a YAML file for your dataset using the following functions:

```python
creator.create_directories()
creator.create_yaml()
```

#### Create Image and Label Pairs
Use the `create_dataset` function to generate image-label pairs for your YOLO-based object detection dataset. Specify the zoom level range, the number of images per zoom level, and the validation data ratio:

```python
zoom_range = [11, 14]  # Replace with your desired zoom level range
num_images_per_zoom = 50  # Replace with the number of images per zoom level
validation_ratio = 0.2  # Replace with your desired validation data ratio

creator.create_dataset(zoom_range, num_images_per_zoom, validation_ratio)
```

This function will create the images and labels required for your YOLO dataset in the specified output folder structure.

#### Options:

- `--mbtiles_path`: Path to the MBTiles file.

The following options are available:

- `--zoom_minmax`: Get the minimum and maximum zoom levels in the MBTiles file.

- `--column_minmax ZOOM_LEVEL`: Get the minimum and maximum tile column numbers for a specific zoom level.

- `--row_minmax ZOOM_LEVEL`: Get the minimum and maximum tile row numbers for a specific zoom level.

- `--get_tile ZOOM COL ROW`: Retrieve tile data for a specific zoom level, column, and row.

- `--get_random_tile ZOOM`: Retrieve random tile data for a specific zoom level.

- `--get_area_tiles ZOOM_STD COL_STD ROW_STD ZOOM`: Retrieve tiles within a specified area defined by a standard zoom level and tile coordinates.

## Segmentation Dataset Creator

The `segmentation_dataset_creator.py` module provides a class `SegDatasetCreator` for generating segmentation datasets from MBTiles files. It creates image-label pairs for training and validation, along with a dataset configuration file in the [YAML format](https://yaml.org/).

### Usage

You can use the `SegDatasetCreator` class by running the script with the desired command-line arguments:

```bash
python segmentation_dataset_creator.py --folder_path "output_folder" --mbtiles_path "path_to_mbtiles_file" [options]
```

#### Options:

- `--folder_path`: Path to the output folder where the dataset will be created.

- `--mbtiles_path`: Path to the MBTiles file.

The following options are available:

- `--each_image_num NUM`: Number of image-label pairs to create for each zoom level. (Default: 50)

- `--val_ratio RATIO`: Validation data ratio, specifying the proportion of data to use for validation. (Default: 0.2)

## Usage

1. **MBTiles Handler**: Use the `mbtiles_handler.py` script to explore the MBTiles file and extract specific tiles or information about the available zoom levels, columns, and rows.

   Example usage to get zoom level min and max:

   ```bash
   python mbtiles_handler.py --mbtiles_path "path_to_mbtiles_file" --zoom_minmax
   ```

2. **Segmentation Dataset Creator**: Use the `segmentation_dataset_creator.py` script to generate segmentation datasets from the MBTiles file. Specify the output folder path, MBTiles file path, and additional options.

   Example usage to create a segmentation dataset:

   ```bash
   python segmentation_dataset_creator.py --folder_path "output_folder" --mbtiles_path "path_to_mbtiles_file" --each_image_num 100 --val_ratio 0.2
   ```

## License

This project is open-source and available under the [MIT License](LICENSE).

---

Feel free to contribute, report issues, or provide feedback to improve this project!
